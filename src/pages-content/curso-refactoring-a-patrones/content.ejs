<div class="container">
  <h2 class="text-center title">
    <t>Contenido del curso</t>
  </h2>

  <div class="calendar">
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title"><t>Bloque 1</t></p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title"><t>Reduciendo complejidad y duplicidad</t></p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><t><strong>Cláusulas de Guarda</strong>: Reducir la complejidad ciclomática.</t></li>
            <li class="text-dark-grey"><t><strong>Value Objects</strong>: Eliminar código duplicado y aumentar la cohesión.</t></li>
            <li class="text-dark-grey"><t><strong>Factory method</strong>: Simplificar la creación de objetos.</t></li>
            <li class="text-dark-grey"><t><strong>DTO’s</strong>: Simplificar la firma de los métodos.</t></li>
          </ul>

        </div>
      </article>
      <article class="course-calendar">
       <div class="course-calendar__day">
          <p class="small-title"><t>Bloque 2</t></p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title course-calendar__title">
            <t>Patrones en los tests</t>
          </p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><t><strong>Shared setup method</strong> y <strong>Test creation method</strong>: Reducir la duplicidad en los tests.</t></li>
            <li class="text-dark-grey"><t><strong>Builder y builders de test</strong>: Construye datos de prueba reduciendo el ruido.</t></li>
          </ul>
          <p class="small-title course-calendar__title">
            <t>Simplificar</t>
          </p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><t><strong>First Class Collection</strong>: Agrupa la lógica en conjuntos de datos.</t></li>
            <li class="text-dark-grey"><t><strong>Null Object</strong>: Elimina comprobaciones <em>if not null</em>.</t></li>
            <li class="text-dark-grey"><t><strong>Decoradores</strong>: Extiende el comportamiento manteniendo la compatibilidad.</t></li>
          </ul>
        </div>
      </article>
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title"><t>Bloque 3</t></p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title"><t>Desacoplar de la infraestructura</t></p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><t><strong>Repositorio</strong>: Centraliza el acceso a datos.</t></li>
            <li class="text-dark-grey"><t><strong>Adaptador</strong>: Desacopla la lógica de negocio de los detalles de implementación.</t></li>
            <li class="text-dark-grey"><t><strong>Cadena de responsabilidad</strong>: Decide quién procesa una petición y/o procesa por partes una acción.</t></li>
          </ul>
        </div>
      </article>
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title"><t>Bloque 4</t></p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title"><t>Extender el comportamiento</t></p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><t><strong>Observer</strong>: Extiende el comportamiento notificando a otros, que reaccionarán en consecuencia.</t></li>
            <li class="text-dark-grey"><t><strong>Publisher/Subscriber</strong>: Evoluciona el observer, lanzando eventos que podrán ser procesados de forma asíncrona.</t></li>
            <li class="text-dark-grey"><t><strong>Currying</strong>: Inyecta dependencias en programación funcional.</t></li>
          </ul>
        </div>
      </article>
  </div>

  <div class="button__wrapper">
    <a
      class="button button--primary"
      href="#contactForm"
      data-trackevent="contact_us.show_form.course_index"
    >
      <t>¡Me interesa!</t>
    </a>
  </div>
</div>

