<div class="container">
  <h2 class="text-center title">
    Contenido del curso
  </h2>

  <div class="calendar">
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title">Bloque 1</p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title">Reduciendo complejidad y duplicidad</p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><strong>Cláusulas de Guarda</strong>: Reducir la complejidad ciclomática.</li>
            <li class="text-dark-grey"><strong>Value Objects</strong>: Eliminar código duplicado y aumentar la cohesión.</li>
            <li class="text-dark-grey"><strong>Factory method</strong>: Simplificar la creación de objetos.</li>
            <li class="text-dark-grey"><strong>DTO’s</strong>: Simplificar la firma de los métodos.</li>
          </ul>

        </div>
      </article>
      <article class="course-calendar">
       <div class="course-calendar__day">
          <p class="small-title">Bloque 2</p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title course-calendar__title">
            Patrones en los tests
          </p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><strong>Shared setup method</strong> y <strong>Test creation method</strong>: Reducir la duplicidad en los tests.</li>
            <li class="text-dark-grey"><strong>Builder y builders de test</strong>: Construye datos de prueba reduciendo el ruido.</li>
          </ul>
          <p class="small-title course-calendar__title">
            Simplificar
          </p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><strong>First Class Collection</strong>: Agrupa la lógica en conjuntos de datos.</li>
            <li class="text-dark-grey"><strong>Null Object</strong>: Elimina comprobaciones <em>if not null</em>.</li>
            <li class="text-dark-grey"><strong>Decoradores</strong>: Extiende el comportamiento manteniendo la compatibilidad.</li>
          </ul>
        </div>
      </article>
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title">Bloque 3</p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title">Desacoplar de la infraestructura</p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><strong>Repositorio</strong>: Centraliza el acceso a datos.</li>
            <li class="text-dark-grey"><strong>Adaptador</strong>: Desacopla la lógica de negocio de los detalles de implementación.</li>
            <li class="text-dark-grey"><strong>Cadena de responsabilidad</strong>: Decide quién procesa una petición y/o procesa por partes una acción.</li>
          </ul>
        </div>
      </article>
      <article class="course-calendar">
        <div class="course-calendar__day">
          <p class="small-title">Bloque 4</p>
        </div>
        <div class="course-calendar__list">
          <p class="small-title">Extender el comportamiento</p>
          <ul class="course-calendar__items">
            <li class="text-dark-grey"><strong>Observer</strong>: Extiende el comportamiento notificando a otros, que reaccionarán en consecuencia.</li>
            <li class="text-dark-grey"><strong>Publisher/Subscriber</strong>: Evoluciona el observer, lanzando eventos que podrán ser procesados de forma asíncrona.</li>
            <li class="text-dark-grey"><strong>Currying</strong>: Inyecta dependencias en programación funcional.</li>
          </ul>
        </div>
      </article>
  </div>

  <div class="button__wrapper">
    <a
      class="button button--primary"
      href="#contactForm"
      data-trackevent="contact_us.show_form.course_index"
    >
      ¡Me interesa!
    </a>
  </div>
</div>

